# This is a basic workflow to help you get started with Actions.

name: CI

# Controls when the action will run
on:
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the main branch.
  push:
    branches: [ cloudflare ]
  pull_request:
    branches: [ cloudflare ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v2


## â¬‡ IMPORTANT PART â¬‡ ###

      - name: heroku login
        run: |
          cat > ~/.netrc <<EOF
            machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
            machine git.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
          EOF
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      - name: create new heroku app
        run: |
          HEROKU_API_KEY=${{secrets.HEROKU_API_KEY}} heroku apps:create naren-new
        
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: "narendirenroxx@gmail.com"
          
          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          
          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: "naren-new"

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"
#Adding comment
          # (Optional, default: "web") 
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web
#       - name: Login to DockerHub
#         uses: docker/login-action@v1 
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

      # Runs a set of commands using the runners  shell
#       - name: Build and push
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           push: true
#           tags: adithya1/nodeapp:latest
    
          
      - name: add heroku domain
        run: HEROKU_API_KEY=${{secrets.HEROKU_API_KEY}} heroku domains:add naren.ccbd-turbo.me -a naren-new
       
      - name: adding domain to cloudflare
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{secrets.ZONE_ID}}/dns_records" -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_AUTH_KEY_1 }}" -H "Content-Type: application/json" --data '{"type":"CNAME","name":"naren","content":"ccbd-turbo.me","ttl":1,"proxied":true}' 
